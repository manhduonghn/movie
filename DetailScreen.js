import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  ScrollView,
  TouchableOpacity,
  useWindowDimensions, 
  Image, // ƒê√£ th√™m Image ƒë·ªÉ hi·ªÉn th·ªã banner
} from 'react-native';
import { Video } from 'expo-av';
import * as ScreenOrientation from 'expo-screen-orientation';

// ------------------- LOGIC RESPONSIVE -------------------

// T√≠nh chi·ªÅu cao video t·ª∑ l·ªá 16:9
const getVideoHeight = (screenWidth) => screenWidth * 0.5625;

// X√°c ƒë·ªãnh n·∫øu m√†n h√¨nh l√† ngang
const isLandscape = (screenWidth, screenHeight) => screenWidth > screenHeight;

export default function DetailScreen({ route }) {
  const { slug } = route.params;
  const { width: screenWidth, height: screenHeight } = useWindowDimensions(); 
  const isHorizontal = isLandscape(screenWidth, screenHeight); 
  
  const [movieDetail, setMovieDetail] = useState(null);
  const [episodes, setEpisodes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedM3u8, setSelectedM3u8] = useState(null);
  
  // üí• NEW: L∆∞u tr·ªØ v·ªã tr√≠ video hi·ªán t·∫°i (milliseconds) - d√πng useRef ƒë·ªÉ kh√¥ng re-render
  const videoPositionRef = useRef(0); 
  // üí• NEW: L∆∞u tr·∫°ng th√°i ch∆°i (ƒëang ch∆°i / t·∫°m d·ª´ng)
  const isPlayingRef = useRef(false);
  // üí• NEW: Theo d√µi xem ng∆∞·ªùi d√πng ƒë√£ ch·ªçn t·∫≠p n√†o ch∆∞a (ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã poster hay video)
  const [hasSelectedEpisode, setHasSelectedEpisode] = useState(false);

  const videoRef = useRef(null);

  // ------------------- EFFECT: FETCH DATA & CLEANUP -------------------
  
  useEffect(() => {
    fetchMovieDetail();

    // Cleanup: ƒê·∫£m b·∫£o m·ªü kh√≥a ho√†n to√†n khi r·ªùi m√†n h√¨nh ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn m√†n h√¨nh Home
    return () => {
        const unlockOrientation = async () => {
            try {
                await ScreenOrientation.unlockAsync(); 
            } catch (e) {
                console.warn('L·ªói m·ªü kh√≥a h∆∞·ªõng m√†n h√¨nh khi unmount:', e);
            }
        };
        unlockOrientation();
    };
  }, [slug]);

  // ------------------- VIDEO ORIENTATION & PLAYBACK HANDLERS -------------------
  
  const handleFullscreenUpdate = async ({ fullscreenUpdate }) => {
    try {
      if (!videoRef.current) return;

      switch (fullscreenUpdate) {
        case Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT:
          // Xoay ngang khi B·∫¨T Fullscreen
          await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_RIGHT);
          break;
        case Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS:
          // Tr·ªü v·ªÅ h∆∞·ªõng d·ªçc khi T·∫ÆT Fullscreen
          await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT_UP);
          break;
      }
    } catch (e) {
        console.error("L·ªói khi thay ƒë·ªïi h∆∞·ªõng m√†n h√¨nh cho video:", e);
    }
  };

  // üí• NEW: X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ch∆°i (L∆∞u v·ªã tr√≠ v√† tr·∫°ng th√°i)
  const handlePlaybackStatusUpdate = useCallback((status) => {
    if (status.isLoaded) {
        // L∆∞u l·∫°i v·ªã tr√≠ ƒëang ch∆°i
        videoPositionRef.current = status.positionMillis || 0;
        // L∆∞u l·∫°i tr·∫°ng th√°i ch∆°i
        isPlayingRef.current = status.isPlaying || status.isBuffering || false;
    }
  }, []);

  // üí• NEW: X·ª≠ l√Ω khi video ƒë√£ load th√†nh c√¥ng (Tua v√† Ch∆°i ti·∫øp khi xoay m√†n h√¨nh)
  const handleVideoLoad = useCallback(async (status) => {
    if (status.isLoaded) {
        // Tua ƒë·∫øn v·ªã tr√≠ ƒë√£ l∆∞u tr∆∞·ªõc khi xoay m√†n h√¨nh (ch·ªâ tua khi v·ªã tr√≠ > 0)
        if (videoPositionRef.current > 100) { // ƒê·∫∑t ng∆∞·ª°ng 100ms ƒë·ªÉ b·ªè qua c√°c v·ªã tr√≠ qu√° nh·ªè
            await videoRef.current.setStatusAsync({ 
                positionMillis: videoPositionRef.current, 
            });
        }
        
        // N·∫øu tr∆∞·ªõc ƒë√≥ ƒëang ch∆°i, th√¨ ch∆°i ti·∫øp
        if (isPlayingRef.current && hasSelectedEpisode) {
            await videoRef.current.playAsync();
        }
    }
  }, [hasSelectedEpisode]);


  // ------------------- API CALLS & HANDLERS -------------------

  const fetchMovieDetail = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`https://phimapi.com/phim/${slug}`);
      const json = await response.json();

      if (json.status && json.movie && json.episodes) {
        setMovieDetail(json.movie);
        setEpisodes(json.episodes);
        
        // Kh√¥ng t·ª± ƒë·ªông ch·ªçn t·∫≠p ƒë·∫ßu ti√™n ·ªü ƒë√¢y n·ªØa,
        // ch√∫ng ta s·∫Ω ƒë·ª£i ng∆∞·ªùi d√πng ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã banner tr∆∞·ªõc.
        setSelectedM3u8(json.episodes[0]?.server_data[0]?.link_m3u8 || null);
        
      } else {
        setError('Kh√¥ng t√¨m th·∫•y chi ti·∫øt phim ho·∫∑c t·∫≠p phim.');
      }
    } catch (e) {
      console.error('Detail Fetch Error:', e);
      setError('L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu chi ti·∫øt.');
    } finally {
      setLoading(false);
    }
  };

  const handleEpisodeSelect = async (link) => {
    if (link === selectedM3u8) {
      // Tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng click l·∫°i t·∫≠p ƒëang xem, ch·ªâ c·∫ßn play
      if (videoRef.current) {
        await videoRef.current.playAsync();
      }
      return;
    }
    
    // üí• NEW: ƒê·∫∑t l·∫°i v·ªã tr√≠ v√† tr·∫°ng th√°i khi chuy·ªÉn t·∫≠p
    videoPositionRef.current = 0;
    isPlayingRef.current = true; // Chuy·ªÉn t·∫≠p l√† **auto-play**

    setSelectedM3u8(link);
    setHasSelectedEpisode(true); // ƒê√°nh d·∫•u ƒë√£ ch·ªçn t·∫≠p

    // N·∫øu videoRef ƒë√£ c√≥, load link m·ªõi v√† play ngay l·∫≠p t·ª©c
    if (videoRef.current) {
      try {
        // Tham s·ªë th·ª© 3 l√† forImmediateUpdates.
        await videoRef.current.loadAsync(
            { uri: link }, 
            { 
                shouldPlay: true, 
                positionMillis: 0 
            }, 
            true
        );
      } catch (error) {
        console.error("L·ªói khi load video m·ªõi:", error);
      }
    }
  };
  
  // ------------------- RENDER -------------------

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#FFD700" />
        <Text style={styles.loadingText}>ƒêang t·∫£i chi ti·∫øt phim...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.errorText}>L·ªói: {error}</Text>
        <TouchableOpacity onPress={fetchMovieDetail} style={styles.retryButton}>
          <Text style={styles.retryButtonText}>Th·ª≠ l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (!movieDetail) return null;

  const renderEpisodes = () => (
    <View style={styles.episodeSection}>
      <Text style={styles.sectionHeader}>Danh s√°ch t·∫≠p</Text>
      {episodes.length > 0 ? (
        episodes.map((server, index) => (
          <View key={index} style={styles.serverContainer}>
            <Text style={styles.serverName}>{server.server_name}</Text>
            <View style={styles.episodesRow}>
              {server.server_data &&
                server.server_data.map((episode) => (
                  <TouchableOpacity
                    key={episode.slug}
                    style={[
                      styles.episodeButton,
                      selectedM3u8 === episode.link_m3u8 &&
                        styles.selectedEpisodeButton,
                    ]}
                    onPress={() => handleEpisodeSelect(episode.link_m3u8)}
                  >
                    <Text
                      style={[
                        styles.episodeButtonText,
                        selectedM3u8 === episode.link_m3u8 &&
                          styles.selectedEpisodeButtonText,
                      ]}
                    >
                      {episode.name}
                    </Text>
                  </TouchableOpacity>
                ))}
            </View>
          </View>
        ))
      ) : (
        <Text style={styles.noEpisodesText}>
          Phim n√†y ch∆∞a c√≥ t·∫≠p n√†o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu ph√°t.
        </Text>
      )}
    </View>
  );

  // üí• NEW: Component Video Player ƒë∆∞·ª£c t√°ch ri√™ng ƒë·ªÉ d·ªÖ d√†ng ƒë·∫∑t v√†o 2 layout
  const VideoPlayerComponent = () => (
    <View style={[styles.playerContainer, !isHorizontal && { height: getVideoHeight(screenWidth) }]}>
      {hasSelectedEpisode && selectedM3u8 ? (
        <Video
          // üí• CHANGED: KH√îNG d√πng KEY ƒë·ªÉ tr√°nh reset khi ƒë·ªïi t·∫≠p/xoay m√†n h√¨nh
          ref={videoRef}
          source={{ uri: selectedM3u8 }}
          style={styles.video}
          useNativeControls
          resizeMode="contain"
          // üí• CHANGED: T√πy ch·ªçn tr·∫°ng th√°i ban ƒë·∫ßu khi component load/re-load
          initialPlaybackStatus={{ 
              shouldPlay: isPlayingRef.current, // Ch∆°i ti·∫øp n·∫øu tr∆∞·ªõc ƒë√≥ ƒëang ch∆°i
              positionMillis: videoPositionRef.current // Tua v·ªÅ v·ªã tr√≠ c≈©
          }}
          onFullscreenUpdate={handleFullscreenUpdate} 
          onPlaybackStatusUpdate={handlePlaybackStatusUpdate} // Ghi l·∫°i v·ªã tr√≠ v√† tr·∫°ng th√°i ch∆°i
          onLoad={handleVideoLoad} // X·ª≠ l√Ω tua l·∫°i khi component ƒë∆∞·ª£c load l·∫°i (v√≠ d·ª•: khi xoay)
        />
      ) : (
        // üí• NEW: Hi·ªÉn th·ªã Banner/Poster khi ch∆∞a ch·ªçn t·∫≠p
        <View style={[styles.noVideo, !isHorizontal && { height: getVideoHeight(screenWidth) }]}>
          {movieDetail?.thumb_url ? (
            <Image 
                source={{ uri: movieDetail.thumb_url }} 
                style={styles.bannerImage}
                resizeMode="cover"
            />
          ) : (
            <Text style={styles.noVideoText}>Vui l√≤ng ch·ªçn t·∫≠p phim ƒë·ªÉ xem.</Text>
          )}
          
          <Text style={styles.initialSelectText}>Ch·ªçn t·∫≠p phim ƒë·ªÉ xem</Text>
        </View>
      )}
    </View>
  );


  // Layout cho m√†n h√¨nh ngang (Tablet/Horizontal)
  if (isHorizontal) {
    return (
      <View style={stylesHorizontal.horizontalContainer}>
        {/* Video Player chi·∫øm n·ª≠a m√†n h√¨nh b√™n tr√°i */}
        <View style={stylesHorizontal.playerContainer}>
            <VideoPlayerComponent />
        </View>

        {/* Th√¥ng tin v√† danh s√°ch t·∫≠p cu·ªôn d·ªçc b√™n ph·∫£i */}
        <ScrollView style={stylesHorizontal.infoAndEpisodeArea}>
          <View style={styles.infoSection}>
            <Text style={styles.detailTitle}>{movieDetail.name}</Text>
            <Text style={styles.metaText}>
              Tr·∫°ng th√°i: {movieDetail.episode_current} | NƒÉm: {movieDetail.year}
            </Text>
            <Text style={styles.content} numberOfLines={4}>
              {(movieDetail.content || '').replace(/<[^>]+>/g, '')}
            </Text>
          </View>
          {renderEpisodes()}
        </ScrollView>
      </View>
    );
  }

  // Layout cho m√†n h√¨nh d·ªçc (Portrait/Default)
  return (
    <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 30 }}>
      {/* 1. Video Player */}
      <VideoPlayerComponent />

      {/* 2. Th√¥ng tin phim */}
      <View style={styles.infoSection}>
        <Text style={styles.detailTitle}>{movieDetail.name}</Text>
        <Text style={styles.originalName}>({movieDetail.origin_name})</Text>
        <Text style={styles.content}>
          {(movieDetail.content || '').replace(/<[^>]+>/g, '')}
        </Text>
        <Text style={styles.metaText}>
          üé¨ Tr·∫°ng th√°i: {movieDetail.episode_current}
        </Text>
        <Text style={styles.metaText}>
          ‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {movieDetail.time} | üìÖ NƒÉm: {movieDetail.year}
        </Text>
        {movieDetail.category && (
          <Text style={styles.metaText}>
            üß© Th·ªÉ lo·∫°i: {movieDetail.category.map((c) => c.name).join(', ')}
          </Text>
        )}
      </View>

      {/* 3. Danh s√°ch t·∫≠p */}
      {renderEpisodes()}
    </ScrollView>
  );
}

// ----------------- STYLES -----------------
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#121212' },
  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#121212' },
  loadingText: { color: '#FFFFFF', marginTop: 10 },
  errorText: { color: '#FF5555', fontSize: 16, textAlign: 'center', marginBottom: 10 },
  retryButton: { backgroundColor: '#FFD700', paddingVertical: 10, paddingHorizontal: 20, borderRadius: 8 },
  retryButtonText: { color: '#121212', fontWeight: 'bold' },
  playerContainer: { width: '100%', backgroundColor: '#000' },
  video: { flex: 1 },
  noVideo: { justifyContent: 'center', alignItems: 'center', width: '100%', position: 'relative' }, 
  // üí• NEW: Style cho ·∫£nh banner
  bannerImage: { width: '100%', height: '100%', position: 'absolute' }, 
  initialSelectText: { 
    color: '#FFD700', 
    fontSize: 18, 
    fontWeight: 'bold', 
    zIndex: 1, 
    backgroundColor: 'rgba(0,0,0,0.5)', 
    padding: 10, 
    borderRadius: 8
  },
  noVideoText: { color: '#FFD700', fontSize: 16 }, // Gi·ªØ l·∫°i n·∫øu kh√¥ng c√≥ thumb_url
  infoSection: { padding: 15, borderBottomWidth: 1, borderBottomColor: '#333' },
  detailTitle: { fontSize: 22, fontWeight: 'bold', color: '#FFFFFF' },
  originalName: { fontSize: 16, color: '#B0B0B0', marginBottom: 10 },
  content: { fontSize: 14, color: '#FFFFFF', lineHeight: 20, marginBottom: 10, fontStyle: 'italic' },
  metaText: { fontSize: 14, color: '#00FF7F', marginBottom: 5 },
  episodeSection: { padding: 15 },
  sectionHeader: { fontSize: 18, fontWeight: 'bold', color: '#FFD700', marginBottom: 10 },
  serverContainer: { marginBottom: 15 },
  serverName: { fontSize: 16, fontWeight: '600', color: '#B0B0B0', marginBottom: 5, borderBottomWidth: 1, borderBottomColor: '#333', paddingBottom: 5 },
  episodesRow: { flexDirection: 'row', flexWrap: 'wrap' },
  episodeButton: { backgroundColor: '#383838', paddingVertical: 8, paddingHorizontal: 12, marginRight: 8, marginBottom: 8, borderRadius: 4, borderWidth: 1, borderColor: '#555' },
  selectedEpisodeButton: { backgroundColor: '#FFD700', borderColor: '#FFD700' },
  episodeButtonText: { color: '#FFFFFF', fontWeight: 'bold' },
  selectedEpisodeButtonText: { color: '#121212' },
  noEpisodesText: { color: '#B0B0B0', fontSize: 14, marginTop: 5 },
});

// Styles cho m√†n h√¨nh ngang (S·ª≠ d·ª•ng khi isHorizontal l√† true)
const stylesHorizontal = StyleSheet.create({
    horizontalContainer: { flex: 1, flexDirection: 'row', backgroundColor: '#121212' },
    playerContainer: { width: '50%', height: '100%', backgroundColor: '#000' },
    video: { flex: 1 },
    noVideo: { flex: 1, justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%', position: 'relative' },
    infoAndEpisodeArea: { width: '50%' },
});
